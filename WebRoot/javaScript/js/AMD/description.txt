CommonJS

http://javascript.ruanyifeng.com/nodejs/module.html

node的应用有模块组成，采取的就是commonJs规范。

每个文件都是一个独立的模块，有自己的作用域。相对于外部而言都是私有的。

每个模块内部，module变量代表当前模块

module是一个对象，他有一些属性，

module.exports----是对外的接口。

加载某个模块，其实就是加载该模块module.exports的属性

特点：
	
	1,所有代码都运行在模块作用域，不会污染全局作用域。
	
	2,模块可多次加载，但一次加载只运行一次。运行结束后就被缓存了。以后加载就直接读取缓存。如果想模块再次运行，必须清楚缓存。
	
	3,模块加载顺序就是代码出现顺序。
	
Module对象

	Node内部提供一个Module构建函数，所有模块都是module实例对象
	
	每个模块内部都有一个module对象，代表当前模块
	
	属性
	
		Module.id			模块识别符，通常是带有绝路径的模块文件名
		
		Module.filename		模块文件名
		
		Module.loaded		返回一个布尔值，表示该模块是否被加载完成
		
		Module.parent		返回一个对象，表示调用该模块的模块
		
		Module.children		返回一个数组，表示该模块要用到的其他模块
		
		Module.exports		表示模块对外输出的值
		
	如果在命令下调用某个模块，那么module.parent就是undefined
	
	如果实在脚本中调用，那么module.parent就是调用他的模块
	
	利用这一点，可以判断当前模块是否为入口脚本
	
	module.exports
		
		var EventEmitter = require('events').EventEmitter;
		module.exports = new EventEmitter();
		
		setTimeout(function() {
		  module.exports.emit('ready');
		}, 1000);
	
	exports变量
		
		Node为每一个模块提供一个exports变量，指向module.exports
		
		这样，就可以在对外输出模块接口时，就可以为exports对象添加方法。
		
		注意不能将exports指向一个值，这样会exports和module.exports联系
		
		每个模块的对外接口，都是一个单一的值。不能使用exports输出，只能使用module.exports输出
		
	CommonJS规范加载模块是同步的。AMD规范加载模块是非同步加载的。
	
	服务器端，模块文件一般都存在本地硬盘，加载比较快，无需用非同步加载。
	
	客户端，采用AMD非同步加载
	
	AMD规范允许输出模块兼容CommonJS规范
	
		define(function (require, exports, module){
		  var someModule = require("someModule");
		  var anotherModule = require("anotherModule");
		
		  someModule.doTehAwesome();
		  anotherModule.doMoarAwesome();
		
		  exports.asplode = function (){
		    someModule.doTehAwesome();
		    anotherModule.doMoarAwesome();
		  };
		});
		
	内置require加载模块文件
	
		require基本功能：读入并执行一个js文件，返回该模块的exports对象，如果没有，发现指定模块会报错。
		
		如果模块输出是个函数，就不能定义在exports对象上，只能定义在module.exports变量上。
		
		module.exports = function () {
		  console.log("hello world")
		}
		
		require('./example2.js')()
		
	require用于加载文件后缀名默认为.js
	
		模块加载路径分相对路径和绝对路径
		
		require.resolve()	require命令加载确却文件名
		
	目录加载规则
	
		page.json里面有个main字段----是入口文件
		
		如果没有或者没有page.json,会默认去加载该目录下的index.js
		
	模块的缓存
	
		第一次加载某个文件时，node会缓存该文件。再次加载，就直接从缓存中取出module.exports属性
		
		所有缓存模块保存在require.cache里面
		
		删除缓存
		
			// 删除指定模块的缓存
			delete require.cache[moduleName];
			
			// 删除所有模块的缓存
			Object.keys(require.cache).forEach(function(key) {
				delete require.cache[key];
			})

NODE_PATH	环境变量

	他是一组以冒号分割的绝对路径，当在其他位置找不到模块时，node就会去这些路径找
	
	如果路径相对复杂，解决方法有两种，一种是重写NODE_PATH,二是将该文件加入node_modules
	
	NODE_PATH是历史遗留下来的一个路径解决方案，通常不推荐使用，而应该使用node_modules机制
	
require.main
	
	用来判断是直接执行还是被调用执行
	
		require.main === module
		
		直接执行的时候，require.main指向module本身，返回为true。
		
		被调用执行的时候，返回false。
		
模块加载机制

	CommonJS加载机制是，输入的是被输出的值的拷贝。
	
	一旦输出一个值，模块内部变化不会影响这个值的变化。
	
		//lib.js
			var counter = 3;
			var incCounter = function() {
				counter ++;
			}
			module.exports = {
				counter : counter,
				incCounter : incCounter
			}
		//main.js
			var counter = require('./lib.js').counter;
			var incCounter = require('./lib.js').incCounter;
			
			console.log(counter);		//3
			incCounter();
			console.log(counter);		//3
			
require内部处理流程
	
	require是CommonJS规范中，用来加载其他模块的命令。
	
	他不是一个全局命令，
	
	他指向当前模块的module.require
	
	后者又调用node内部命令Module._load
		
		Module._load = function(request, parent, isMain) {
		  // 1. 检查 Module._cache，是否缓存之中有指定模块
		  // 2. 如果缓存之中没有，就创建一个新的Module实例
		  // 3. 将它保存到缓存
		  // 4. 使用 module.load() 加载指定的模块文件，
		  //    读取文件内容之后，使用 module.compile() 执行文件代码
		  // 5. 如果加载/解析过程报错，就从缓存删除该模块
		  // 6. 返回该模块的 module.exports
		};
		
		Module.prototype._compile = function(content, filename) {
		  // 1. 生成一个require函数，指向module.require
		  // 2. 加载其他辅助方法到require
		  // 3. 将文件内容放到一个函数之中，该函数可调用 require
		  // 4. 执行该函数
		};
		
		//辅助方法
			require(): 			加载外部模块
			require.resolve()：	将模块名解析到一个绝对路径
			require.main：		指向主模块
			require.cache：		指向所有缓存的模块
			require.extensions：	根据文件的后缀名，调用不同的执行函数
			
	Module._compile方法是同步执行的，所以Module._load要等它执行完成，才会向用户返回module.exports的值。
	
	一旦require函数准备完毕，整个所要加载的脚本内容，就被放到一个新的函数之中，这样可以避免污染全局环境。该函数的参数包括require、module、exports，以及其他一些参数。
	
	
---------------------------------------------------------------------------------------------------------------------------
*	
*	服务器端规范主要是CommonJS，node.js用的就是CommonJS规范。
*	客户端规范主要有：
*		AMD（异步模块定义，推崇依赖前置）、
*		CMD（通用模块定义，推崇依赖就近）。
*		AMD规范的实现主要有RequireJS，
*		CMD规范的主要实现有SeaJS。
*		RequireJS在国外用的比较多，
*		SeaJS在国内用的比较多，并且SeaJS的创始人为阿里的玉伯，所以SeaJS在阿里系用的非常广泛，包括京东等大厂也在用SeaJS，
*		但是SeaJS已经停止维护了，因为在ES6中已经有了模块化的实现，随着ES6的普及，第三方的模块化实现将会慢慢的淘汰（但是这个在国内可能还要很多年）
*	
*	AMD和CMD区别
*		1，	AMD的require区分全局和局部
*			CMD的require没有全局的require
*		
*		2，	AMD是提前执行（2.0之后也可以延迟执行）
*			CMD是延迟执行
*		
*		3，	AMD推崇依赖前置(也支持CMD写法)
*			CMD推崇依赖就近
*		
---------------------------------------------------------------------------------------------------------------------------


	
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

