
-- http://caibaojian.com/es6/string.html

-- let 
	++ 命令在所在代码块内有效
	++ 不存在变量提升
	++ 在相同作用域内，不允许定义
	
-- do
	++ 块级作用域是一个语句，多个封装起来，没有返回值。
	++ let x = do {
			let t = f();
			t*t + 1;
		}
	++ 这样在外面就可以拿到块级作用域的返回值
	
-- const
	++ 声明一个只读的常量，一旦声明，常量的值无法更改
	++ 只声明，不赋值，会报错
	++ 只在块级作用域内有效

-- 顶层对象属性和全局变量挂钩，被认为是js语言最大的设计败笔
	++ window.a = 1;
	++ console.log(a);
	++ a = 2;
	++ console.log(a);
	
-- 变量解构赋值
	++ 1,数组
		++ var a = 1; var b = 2; var c = 3;	//es5
		++ var [a, b, c] = [1, 2, 3];		//es6
		
		++ let [head, ...tail] = [1, 2, 3, 4];
		++ head // 1
		++ tail // [2, 3, 4]
		
		++ let [ , , third] = ["", "bar", "baz"];
		++ foo	 //foo is not defined
		++ third // "baz"
		
		++ 解构赋值允许指定默认值
		++ 默认值可以引用解构赋值的其他变量
		
	++ 2,对象
		++ 数组的元素是按次序排列的，变量的取值由它的位置决定
		++ 对象的属性没有次序，变量必须与属性同名
		
		++ var { bar, foo } = { foo: "aaa", bar: "bbb" };
		++ foo // "aaa"
		++ bar // "bbb"
		
		++ let obj = { first: 'hello', last: 'world' };
		++ let { first: f, last: l } = obj;
		++ f // 'hello'
		++ l // 'world'
		
		++ 内部机制
		++ 先找属性，再找赋给的变量。
		
		++ 解构可以指定默认值
		
		++ var {x = 3} = {};
		++ x // 3
		
		++ var {x, y = 5} = {x: 1};
		++ x // 1
		++ y // 5
		
		++ var {x:y = 3} = {};
		++ y // 3
		
	++ 3,字符串
		++ const [a, b, c, d, e] = 'hello';
		++ let {length : len} = 'hello';
		++ len // 5
		
	++ 4,数值和布尔
		++ 解构时，如果等号右边是数值或布尔，则先转换为对象.只要等号右边不是对象，都将先转换成对象，null和undefined解构会报错
		
		++ let {toString: s} = 123;
		++ s === Number.prototype.toString // true
		
	++ 5,函数参数
		++ function add([x, y]){
			  return x + y;
		++ }
		++ add([1, 2]); // 3
		
		++ 默认值,如果结构失败，就等于默认值
			++ function move({x = 0, y = 0} = {}) {
			  	  return [x, y];
			++ }
			
			++ move({x: 3, y: 8}); // [3, 8]
			++ move({x: 3}); // [3, 0]
			++ move({}); // [0, 0]
			++ move(); // [0, 0]
			
	++ 6,不能使用圆括号的情况
		++ 声明语句时
			++ var [(a)] = [1];
			++ var { o: ({ p: p }) } = { o: { p: 2 } };
			
		++ 函数参数时
			++ function f([(z)]) { return z; }
		
		++ 赋值时
			++ ({ p: a }) = { p: 42 };
			
	++ 7,可以使用圆括号的情况只有一种
		++ 赋值语句的非模式部分
			++ [(b)] = [3]; // 正确
			++ ({ p: (d) } = {}); // 正确
			++ [(parseInt.prop)] = [3]; // 正确
			
	++ 8,解构用途
		++ 1,交换变量的值
			++ [x, y] = [y, x];
			
		++ 2,从函数返回多个值
			++ function example() {
			++   return {
			++     foo: 1,
			++     bar: 2
			++   };
			++ }
			++ var { foo, bar } = example();
			
		++ 3,函数参数 将一组参数和变量名结合起来
			++ function f({x, y, z}) { ... }
			++ f({z: 3, y: 2, x: 1});
			
		++ 4,提取json数据（最为有用）
			++ var json = {
			++ 	  id:3,
			++	  status:200,
			++	  data:[666,999]
			++ }
			++ let {id,status,number} =json;
			++ console.log(id, status, number);
			
		++ 5,函数参数默认值
		++ 6,遍历map结构
			++  var map = new Map();
				map.set('first', 'hello');
				map.set('second', 'world');
				
				for (let [key, value] of map) {
				  console.log(key + " is " + value);
				}
				for (let [key] of map) {
				  console.log(key);
				}
				for (let [,value] of map) {
				  console.log(value);
				}
		++ 7,输入模块的指定方法
		
-- 字符串 
	++ incldues() 返回布尔， 是否找到参数字符串
	++ startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。
	++ endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。
	++ repeat() 将原字符串重复n次。如果是小数，会被取整。为负数即报错
	++ padstart() 字符串首部补全
	++ padend() 字符串尾部补全
	++ `` 输出字符串模板 变量用${}包着。转义用\
	
-- 数组
	++ 对象转为数组	Arrary.from
		++ let obj = {'0':'a','1':'b','2':'c',length:3};
		++ let arr = [].slice.call(obj);		//es5
		++ let arr = Arrary.from(obj);			//es6
		
		++ Arrary.from可以接受第二个参数 对每一个元素进行处理，处理后放入数组
		
	++ 将一组值转化为数组  Array.of() 
		++ Array.of(3, 11, 8) // [3,11,8]
		++ function ArrayOf(){
			  return [].slice.call(arguments);
		++ }
	
	++ 数组实例 copyWithin()
		++ Array.prototype.copyWithin(target, start = 0, end = this.length);
		++ target,必填，从该位置开始替换
		++ start ,从该位置开始读取数据，默认为0。如果为负值，表示倒数。
		++ end ,到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。
			
		++ [1, 2, 3, 4, 5].copyWithin(0, 3)
		++ // [4, 5, 3, 4, 5]
		
	++ find() 和 findIndex()
		++ find可以接受三个回调函数
		++ value 当前的值、index当前的位置和arr原数组。
			++ [1, 5, 10, 15].find(function(value, index, arr) {
			  	  return value > 9;
			++ }) // 10
			
	++ 定值填充数组 fill()
	++ entries()	对键值对的遍历
	++ keys()		键名的遍历
	++ values()		键值的遍历
	++ includes()	判断数组里是否包含给定值
	
	++ ES5对空位的处理，已经很不一致了，大多数情况下会忽略空位
		++ forEach(), filter(), every() 和some()都会跳过空位。
		++ map()会跳过空位，但会保留这个值
		++ join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。
		
	++ ES6将空位转化为undefined
		++ entries()、keys()、values()、find()和findIndex()会将空位处理成undefined
		
-- 函数
	++ 1,参数默认值
		++ function log(x, y = 'World') {
		++   console.log(x, y);
		++ }
		
		++ log('Hello') 			// Hello World
		++ log('Hello', 'China') 	// Hello China
		++ log('Hello', '') 		// Hello
		
	++ 2,解耦赋值默认值结合
		++ 参数不可省 
			function fetch(url, { body = '', method = 'GET', headers = {} }) {
			  console.log(method);
			}
			
			fetch('http://example.com', {})
			// "GET"
			
			fetch('http://example.com')
			// 报错
			
		++ 参数可省
			function fetch(url, { method = 'GET' } = {}) {
			  console.log(method);
			}
			
			fetch('http://example.com')
			// "GET"
			
		++ 参数在undefined下回触发默认值，在null下不会触发
		
	++ 3,函数 length 失真情况
		++ 函数length是返回没有默认值的参数的长度
			(function (a) {}).length // 1
			(function (a = 5) {}).length // 0
			(function (a, b, c = 5) {}).length // 2
			
		++ 设置默认值的参数不是尾参数，后面的参数不会计入length里面
			++ (function (a = 0, b, c) {}).length // 0
			++ (function (a, b = 1, c) {}).length // 1
			
	++ 4,作用域
		++ 参数默认值是一个变量时，该变量作用域是先是当前函数的作用域，再是全局作用域
			++  var x = 1;

				function f(x, y = x) {
				  console.log(y);
				}
				
				f(2) // 2
		++ 若调用时参数默认值变量没有生成时，则指向全局
		++ 若调用时参数默认值变量没有时，全局变量也没有，则会报错
		
	++ 5,rest参数
		++ 多个参数集合，用...values表示。
		++ rest之后就不可再加参数了。
		++ 在函数调用时用f(...values),此时...values可以展开数组,不需要apply了。
			function f(x, y, z) {
			}
			var args = [0, 1, 2];
			
			f.apply(null, args);	//es5
			f(...args);				//es6
			
	++ 6,扩展运算
		++ 合并数组
			++  var arr1 = ['a', 'b'];
				var arr2 = ['c'];
				var arr3 = ['d', 'e'];
				
				arr1.concat(arr2, arr3);
				[...arr1, ...arr2, ...arr3]
				
		++ 生成数组
			++ 拓展运算符只能放在参数最后一位
			++ 	var arr1 = ['a', 'b'];
				var arr2 = ['c', ...arr1];
				
		++ 函数返回值
			++ 可返回多个返回值
			
	++ 7,函数名name属性
	
	++ 8,箭头函数
		++ 1,函数有参数，有返回值
		
			// 函数名   参数	返回值
			var f = v => v;	
			
			var f = function(v) {
			  return v;
			};
		
		++ 2,函数不需要参数，则用()代表
		
			var f = () => 5;
			var f = function () { return 5 };
			
			var sum = (num1, num2) => num1 + num2;
			var sum = function(num1, num2) {
			  return num1 + num2;
			};
			
		++ 3,代码块部分多与一条语句，用大括号栝起来，并用return 语句返回
			++	var sum = (num1, num2) =>{ return num1 + num2 };
		
		++ 4,如果返回为一个对象,在对象外面加上括号
			++ var getItem = id => ({id:id,name:'Item'});
		
		++ 5,箭头函数和变量解构结合使用
			++ const full = ({ first, last }) => first + ' ' + last;
			
		++ 6,简化回调函数和结合rest(...values);
		
			++ const headAndTail = (head, ...tail) => [head, tail];
			++ headAndTail(1, 2, 3, 4, 5)
		
		++ 7,箭头函数注意点
			++ 1,this问题。函数体内的this对象是定义时所在的对象，而不是使用时所在的对象。
				 this指向是可变的，但是在箭头函数里面是固定的。
				 
				 	++  function foo() {
						  setTimeout(() => {
						    console.log('id:', this.id);
						  }, 100);
						}
						//this指向当前函数(函数在哪定义的this就指向谁)
						var id = 21;
						foo.call({ id: 42 });
						/**------------------------------------------------*/
						function foo() {
						  setTimeout(function(){
						    console.log('id:', this.id);
						  }, 100);
						}
						//this指向window
						var id = 21;
						foo.call({ id: 42 });
			++ 2,不能当构造函数使用，不可用new关键词。
			++ 3,不可使用arguments，如果要使用，用rest(...values)代替.
			++ 4,不可使用yield命令，因为箭头函数不可用作Generator函数
			
				function foo() {
				  return () => {
				    return () => {
				      return () => {
				        console.log('id:', this.id);
				      };
				    };
				  };
				}
				
				var f = foo.call({id: 1});
				
				var t1 = f.call({id: 2})()(); // id: 1
				var t2 = f().call({id: 3})(); // id: 1
				var t3 = f()().call({id: 4}); // id: 1
		
		++ 绑定this(双冒号)
			++ 左边是一个对象，右边是一个函数
			
			++ 该运算符自动将左边对象，作为上下文环境（this对象），绑定到右边函数上。
				++ foo::bar                <===         bar.bind(foo)
				
			++ 如果双冒号左边为空，右边是一个对象的方法。就等于该方法绑定在该对象上
				++ var method = obj::obj.foo;
				++ var method = ::obj.foo;
				
			++ 可以用链式写法，
		
		++ 尾调用优化
			++ 是链式编程非常重要的概念，某个函数最后一步调用另一个函数。
				function f(x) {
				  return g(x);
				}
				
				//不是,有赋值操作
				function f(x) {
				  let y = g(x);
				  return y;
				}
				
				//调用后还有操作
				function f(x) {
					return g(x) + 1;
				}
			
				//没有return
				function f(x) {
				  g(x);
				}
			
			++ 函数调用会在内层形成一个调用记录，又称调用帧。所有的调用帧就形成一个调用栈
			++ 尾调用优化只有在严格模式下有效	
			
		++ 尾递归
			++ 自己调用自己就叫递归,递归的本质是循环操作,纯粹的函数式编程是没有循环操作命令的，所有的循环都是用递归实现,
			++ 递归非常耗内存，容易栈溢出保留多个调用记录
			++ 尾递归永远不存在栈溢出，只保留一个调用记录
	
		++ 递归函数的改写
			++ 用尾递归实现防止内存溢出
				++ function totalFactorial(n,total) {
						if(n===1) return total;
						return totalFactorial(n-1, n*total);
				   }
				   function factorial(n) {
				   		return totalFactorial(n,1);
				   }
				   factorial(5)	
				   
				++ function factorial( n, total = 1 ) {
						if(n === 1) return total;
						return totalFactorial(n - 1, n * total);
				   }
				   factorial(5)		//ES6
				 
		++ 科里化
			++ 将多参数的函数转换成单参数的函数	
			
		++ 尾递归优化
		
		++ 不能使用箭头函数
		
			++ 字面量定义对象时
			
			++ 原型方法定义对象时
			
			++ 回调函数时。
			
			++ 定义构造函数时
			
-- 对象
	++ 属性
		++ es6允许直接写入变量和函数，作为对象的属性和方法
			++ 变量
			    let foo = 'bar';			
				let baz = {foo:foo};
			++ 函数
				let o = {
					method(){
						return 'Hello';
					}
				}
				let obj = {
					*m(){	// Generator函数
						yield 'Hello World';					
					}
				}
		
	++ 属性名表达式
		++ 标识符和表达式两种
			++	obj.method = true;
				obj['abc' + 'd'] = 123;
		++ 使用字面量形式定义对象[ES5]
			++	var obj ={
					foo:true,
					mon:'123'
				}	
				obj.foo		//true
				obj[foo]	//undefined	
				
		++ 	使用字面量形式定义对象[ES6]
			++	let flag = 'foo';
				let obj ={
					[foo]:true,
					['abc' + 'd']:'123'
				}	
				obj[foo]		//true
				obj.foo			//undefined
				
		++ 表达式可以定义方法名
			++	let obj ={
					['h'+'ello'](){
						return 'hi';
					}
				}
				
		++ 属性名表达式如果是一个对象，默认将对象转化为字符串[object Object]
			++	const keyA = {a:1};
				const keyB = {b:2};
				
				const myObj = {
					[keyA]:'valueA',
					[keyB]:'valueB'
				}
		++ name属性
			++	var person = {
				  sayName() {
				    console.log('Nicholas');
				  }
				};
				person.sayName.name
				
		++ Object.is()
			++	+0 == -0 //true
				+ 0 === -0 //true
				NaN == NaN //false
		
				Object.is(+0, -0);		//false
				Object.is(NaN, NaN);	//true
				
		Object.assign()
			++	用于对象的合并，将源对象(source)复制到目标对象上(target);
			++	第一个参数是目标对象，第二个参数是源对象
				++	let source1 = {a:1};
					let target1 = {b:2};
					Object.assign(target1,source1);
			++ 目标对象和源对象同名，后面的会覆盖掉前面的。
			++ 参数只有一个，直接返回。
			++ 参数不是对象，先转化为对象
			++ undefined 和null 不可作为参数
			
				




-- class类
	++ 通过class关键字 定义类
		++	class Point{
				constructor(x,y){
					this.x = x;
					this.y = y;
				}
				
				toString(){
					return '('+this.x+','+this.y+')'
				}
			}
			var point = new Point(1,2);
			point.toString();
			
			point.constructor = Point.prototype.constructor;
			Point.prototype.constructor = Point;
			
	++ 类的数据类型就是函数，类的本身指向构造函数
	++ 类的原型的constructor对象直接指向类本身
	++ 在类的实例上调用方法，实际上就是调用类的原型的方法
	++ 类的属性名可以用表达式
	
	++  constructor
		++ 类的constructor方法是类默认方法。通过new生成对象实例时，自动生成constructor方法。
	    ++ 一个类必须有constructor方法，如果没有，自动补上
	    ++ constructor默认返回实例对象(this)
	        
	++ 类的prototype和实例的__proto__
		++	子父类
			class A {};
			class B extend A {};
			
			B.prototype.__proto__ = A.prototype;
			B.__proto__ = A;
			
			Object.setPrototypeOf = function( obj, proto) {
				obj.__proto__ = proto;
				return obj;
			}
			
			Object.setPrototypeOf();
			
	++ extend
		++ extend不仅可以继承类，也可以继承原生构造函数
		
	++ Class静态方法
		++	类是实例的原型。所以在继承的时候，定义在类的方法，都会被继承。
			如果在一个方法只前加上static关键字，表示该方法不会被实例继承，只是通过类调用
			
			class Foo {
				static method() {
					return 'hello';
				}
			}	
			Foo.method();
			
			let foo = new Foo();
			foo.method()		//TypeError: foo.method is not a function		
		
		++ 父类的静态，可以被子类继承
			
			class Foo {
				static method() {
					return 'hello';
				}
			}
			class Bar extend Foo {
			}
			
			Bar.method();
			
		++ class 静态方法和静态属性
			++ 静态属性是指class本身就有的属性，不是定义在实例上的属性
				class Foo {
					return 'hello';
				}
				
				Foo.prop = 1;
				Foo.prop;
				
			++ class内部只有静态方法，没有静态属性。只有这种写法可行。
				class Foo {
					prop:1				//无效	
					
					static prop : 1		//无效
				}
				
			++ 类的实例属性,只能写在constructor里面
				class Foo {
					myProp : 1
					
					constructor() {
						console.log(this.myProp);
					}
				}
				
			++ 类的静态属性
				class Foo {
					static myProp = 1;
					constructor() {
						console.log(Foo.myProp);
					}
				}
				
				//老写法 
				class Foo {
				}
				Foo.prop = 1;
				
				//新写法
				class Foo {
					static prop = 1;
				}
				
			++ new.target属性
				++ 确定构造函数是怎么调用的.
					++	function Person(name) {
							if(new.target != undefined || new.target == Person){
								this.name = name;
							}else{
								throw new Error('必须使用new生成实例');
							}
						}
						let person new Person('张三');
						console.log(person.name());
						
						let notPerson = Person.call('person','张三')

-- Symbol
	++ 第七种数据类型,表示独一无二的值.
	++ Symbol值，是有Symbol函数生成的。
	++ 对象的属性名现在有两种类型。一种是字符串，一种是Symbol
	++ 不能用new 关键字 (Symbol值不是对象，所以不能添加属性。它是类似于字符串的数据类型)
	++ Symbol可以接受一个字符串作为参数。
		++ 字符串
			var s = Symbol('foo');
			typeof s;			//symbol
			s.toString();		//Symbol('foo')
		++ 对象
			const obj = {
				toString(){
					return 'abc';
				}
			}
			const sym = Symbol(obj)
			sym			//Symbol(abc)
		

-- Set和Map
	++ 本身就是一个构造函数,构成set数据结构.
	++ set类似于数组，但他的每一个值都是唯一的。
		++	var s = new Set();
			[2, 3, 5, 4, 5, 2, 2].map(x => s.add(x));
			for(let i of s){
				consolel.log(i);
			}
	++ 接受的参数
		++ 可以为一个数组(类似数组的对象)
			var s = new Set([1, 2, 3, 4, 5, 5, 5, 5]);
			s			//
			[...s]		//[1, 2, 3, 4, 5]
			s.size		//5
	++ set内部判断值是否相等,内部不允许值重复相等
		let s = new Set();
		let a = NaN,
			b = NaN;
		s.add(a);
		s.add(b);
		s	//Set{NaN}
		
		//两个空对象是不等的
		s.add({})
		s.add({})
		s.size	//2
		
	++ set实例的属性和方法
		++ Set.prototype.constructor	//set构造函数
		++ Set.prototype.size			//成员个数
		++ 操作
			++ add()	添加某个值，返回set本身
			++ delete()	删除某个值，返回布尔。
			++ has()	是否拥有某个成员，返回布尔
			++ clear()	//清除所有成员，没有返回值
			++ Array.from 将set结构转为数组结构	*********
				++	var s = new Set();
					var arr = Array.from(s);
				++	封装一下/数组去重
					function uniqueArrary(array) {
						return Arrary.from(new Set(array));
					}
			
		++ 遍历,遍历顺序是插入顺序
			++ keys()		返回键名
			++ values()		返回简值
			++ entries()	返回键值对
			++ forEach()	使用函数遍历，没有返回值
				let set = new Set(['red', 'green', 'blue']);
				for(let i of set.entries){
					console.log(i);
				}
				set.forEach((value,key) => console.log(value))
			++ set结构默认可遍历，默认遍历器生成的函数就是他的values值
			   for of 可直接遍历set
			++ set实现并集，交集，差集
				let a = new Set([1,2,3]);
				let b = new Set([3,2,4]);
				
				let union = new Set([...a, ...b]);							//并集
				let intersect = new Set([...a].filter(x => b.has(x)))		//交集
				let difference = new Set([...a].filter(x => !b.has(x)))		//差集
		
		++ 遍历过程中，改变set数据结构
			++ 1, Array.from().
				let set = new Set([1,2,3])
				set = new Set(Array.from(set,val => val*2));
				set = Array.from(set)
				
			++ 2, 利用原set结构映射出来一种新结构，然后赋值给原来的set结构		
				let set = new Set([1,2,3])
				set = new Set([...set].map(val => val*2))
				
	++ WeakSet和Set
		++ 区别
			++ WeakSet成员只能是对象
			++ weakSet不可遍历
			++ 作为构造函数，WeakSet可以接受一个数组或类似于数组的对象
			++	WeakSet.prototype.add()	
				WeakSet.prototype.delete()
				WeakSet.prototype.has()
				WeakSet没有size属性，不能遍历
				
				let ws = new WeakSet();
				let obj = {},
					foos = {};
					
				ws.add(window);
				ws.add(obj);
				
				ws.has(widnow);
				ws.has(foos)
		
	++ Map-本质是键值对的集合
		++	Obj 提供的结构是"字符串-值"
			es6 提供的结构是"值-值"(键的范围不仅仅是字符串，可以为对象)
		
		++ 作为构造函数,Map可以接受一个数组作为参数，数组里面的成员是一个个表示键值对的数组
			++	var map = new Map([
					['name','张三'],
					['Author','李白']
				])
				map.has('name');
				map.get('name');
				map.has('Author');
				map.get('Author');
			++ 同一个键被多次赋值，后面的会覆盖掉前面的
			++ 字符串true和布尔true得到结果不一样
				var map = new Map();
				map.set('true','bar')
				map.set(true,'foo');
				map.get('true');
				map.get(true);
				
			++ 读取一个未知的键，返回undefined
			++ 只有对同一个对象的引用，map结构才将其视为同一个键。
				var map = new Map();
				map.set(['a'],'123');
				map.get(['a']);			//undefined	这两个内存地址不一样
			++ 只要内存地址不一样，就视为两个键
				var map = new Map();
				map.set(NaN,'123');
				map.get(NaN);
				
				map.set('-0','123');
				map.get('+0');
				
		++ 实例的属性和方法
			++	size
				set(key,value)
				get(key,value)		参数为key value，返回map本身
				has(key,value)		参数为key value，返回值为布尔
				delete(key)			参数为key，返回值为布尔
				clear()				没有参数和返回值
				
		++	遍历
			keys()
			values()
			entries()
			forEach()
		++ 与其他数据结构的转换
			++ map转为数组
				let map = new Map().set(true,'1').set({foo:2},['abc']);
				[...map] 
				
			++ 数组转为map
				new Map([[true,'1'],[{foo:2},['abc']]]);
				
			++ map转为对象
				function strMapToObj(strMap) {
					var obj = Object.create(null);
					for(let [k,v] of strMap){
						obj[k] = v
					}
					return obj;
				}
				var map = new Map().set('Yes',true).set('No',false);
				strMapToObj(map);
				
			++ 对象转成map
				function objToStrMap(obj) {
					var strMap = new Map();
					for(let k of Object.keys(obj)){
						strMap.set(k,obj[k])
					}
					console.log(strMap);
				}
				var obj = {
					'Yes':'true',
					'No':'false'
				}
				objToStrMap(obj);
				
			++ map转json
				++ map键名是字符串时，转为对象json
				         转换时，先将map转换成对象，再转换成json
					function strMapToObj(strMap) {
						var obj = Object.create(null);
						for(let [k,v] of strMap){
							obj[k] = v
						}
						return obj;
					}
					function strMapToJson(strMap) {
						return JSON.stringify(strMapToObj(strMap));
					}
					var myMap = new Map().set('Yes',true).set('No',false);
					strMapToJson(myMap)
					
				++ map键名是非字符串，转为数组json
					function mapToArrayJson(map){
						return JSON.stringify([...map]);
					}
					var map = new Map().set(['true',1]).set({foo:2},['abc']);
					mapToArrayJson(map);
				
			++ JSON转Map
				++ 键名是字符串---现将json字符串转换成对象，再将对象转换成Map
					function objToStrMap(obj) {
						var strMap = new Map();
						for(let k of Object.keys(obj)){
							strMap.set(k,obj[k])
						}
						console.log(strMap);
					}
					function jsonToStrMap(json) {
						return objToStrMap(JSON.parse(json));					
					}	
					jsonToStrMap('{"Yes":"true","No":false}')
				
				++ 数组的json
					function jsonToMap(json) {
						return new Map(JSON.parse(json))
					}
					jsonToMap('[["true",1],[{"foo":2},["abc"]]]')
					
			  
-- Proxy和Reflect
	++ 修改某些操作的默认行为,等同于在语言层面做出修改，即对编程语言进行编程
	++ 提供了Proxy构造函数，生成Proxy实例
		var proxy = new Proxy(target,handler)
			target	所要拦截的目标对象
			handler	定制拦截行为
	
	++ handler没有设置任何拦截行为，直接通向源对象。访问handler就等于访问target
		var target = {};
		var handler = {};
		var proxy = new Proxy(target,handler);
		proxy.a = 'b';
		target.a	//'b'
		
	++ 将proxy设置到object.proxy里面，从而可以在obj对象上调用
		var object = {proxy:new Proxy(target,hanler)}
	++ 实例也可以作为其他对象的原型对象
		var proxy =new Proxy({},{
			get:function(target,handler){
				return 35;
			}
		})
		var obj = Object.create(proxy);
		obj.time;
		
	++ 同一个拦截器函数。可以设置多个拦截操作
	
	
	
	++ get()
		---拦截某个属性的读取操作
			var person = {
				name:'张三'
			}
			var proxy = new Proxy(person,{
				get : function(target,handler) {
					if(handler in target){
						return target[handler];
					}else{
						throw new ReferenceError('"handler:"handler+"is does not exist"')
					}
				}
				
			})
			proxy.name
			proxy.age
		
		---get方法可以继承
			
		
		
		
	
	
	
				
		
		
-- Generator函数
	++ ES6新型函数，用于异步编程。
	++ 跟Promise联合使用，降低异步编程编写和阅读难度
	++ 跟普通函数的区别
		++ function与函数名之间有个星号
		++ 函数内部定yield(产出)语句					
				
	
	
	
	
	
	
	
	
	
 